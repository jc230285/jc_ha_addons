#!/command/with-contenv bashio
# vim: ft=bash
# shellcheck shell=bash
# ==============================================================================
# Post-start initialization of MariaDB service
# ==============================================================================

function execute_without_error_messages() {
    local current_log_level="${__BASHIO_LOG_LEVELS[${__BASHIO_LOG_LEVEL}]}"
    bashio::log.level fatal
    local exit_code=0
    # shellcheck disable=SC2068
    $@ || exit_code=$?
    # shellcheck disable=SC2086
    bashio::log.level ${current_log_level}
    return ${exit_code}
}

# Wait until DB is running
while ! mysql -e "" 2> /dev/null; do
    sleep 1
done
bashio::log.info "MariaDB started"

# Delete service information, just in case the previous instance somehow did not cleanup
execute_without_error_messages bashio::services.delete "mysql" || true

bashio::log.info "Check data integrity and fix corruptions"
mysqlcheck --no-defaults --databases mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --databases mysql --check --check-upgrade --auto-repair || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --check --check-upgrade --auto-repair || true

bashio::log.info "Ensuring internal database upgrades are performed"
mysql_upgrade --silent

# Set default secure values after initial setup
if bashio::var.true "${NEW_INSTALL}"; then
    # Secure the installation.
    mysql <<-EOSQL
        SET @@SESSION.SQL_LOG_BIN=0;
        DELETE FROM
            mysql.user
        WHERE
            user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
                OR host NOT IN ('localhost');
        DELETE FROM
            mysql.proxies_priv
        WHERE
            user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
                OR host NOT IN ('localhost');
        DROP DATABASE IF EXISTS test;
        FLUSH PRIVILEGES;
EOSQL
fi

# Init databases
bashio::log.info "Ensure databases exists"
for database in $(bashio::config "databases"); do
    bashio::log.info "Create database ${database}"
    mysql -e "CREATE DATABASE ${database};" 2> /dev/null || true
done

# Init logins
bashio::log.info "Ensure users exists and are updated"
for login in $(bashio::config "logins|keys"); do
    USERNAME=$(bashio::config "logins[${login}].username")
    PASSWORD=$(bashio::config "logins[${login}].password")

    if mysql -e "SET PASSWORD FOR '${USERNAME}'@'%' = PASSWORD('${PASSWORD}');" 2> /dev/null; then
        bashio::log.info "Update user ${USERNAME}"
    else
        bashio::log.info "Create user ${USERNAME} with remote access"
        mysql -e "CREATE USER '${USERNAME}'@'%' IDENTIFIED BY '${PASSWORD}';" 2> /dev/null || true
        # Also create localhost access for compatibility
        mysql -e "CREATE USER '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}';" 2> /dev/null || true
    fi
done

# Init rights
bashio::log.info "Init/Update rights"
for right in $(bashio::config "rights|keys"); do
    USERNAME=$(bashio::config "rights[${right}].username")
    DATABASE=$(bashio::config "rights[${right}].database")

    if bashio::config.exists "rights[${right}].privileges"; then
        PRIVILEGES=$(bashio::config "rights[${right}].privileges")
        bashio::log.info "Granting ${PRIVILEGES} to ${USERNAME} on ${DATABASE}"
        mysql -e "REVOKE ALL PRIVILEGES ON ${DATABASE}.* FROM '${USERNAME}'@'%';" || true
        mysql -e "GRANT ${PRIVILEGES} ON ${DATABASE}.* TO '${USERNAME}'@'%';" || true
        # Also grant to localhost for compatibility
        mysql -e "REVOKE ALL PRIVILEGES ON ${DATABASE}.* FROM '${USERNAME}'@'localhost';" || true
        mysql -e "GRANT ${PRIVILEGES} ON ${DATABASE}.* TO '${USERNAME}'@'localhost';" || true
    else
        bashio::log.info "Granting all privileges to ${USERNAME} on ${DATABASE}"
        mysql -e "GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'%';" 2> /dev/null || true
        mysql -e "GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'localhost';" 2> /dev/null || true
    fi
done

# Generate service user
if ! bashio::fs.file_exists "/data/secret"; then
    pwgen 64 1 > /data/secret
fi
SECRET=$(</data/secret)
mysql -e "CREATE USER 'service'@'172.30.32.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "CREATE USER 'service'@'172.30.33.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.32.%' WITH GRANT OPTION;" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.33.%' WITH GRANT OPTION;" 2> /dev/null || true

# Create Galera SST user if Galera is enabled
if bashio::config.true 'galera_enabled'; then
    SST_USER=$(bashio::config 'wsrep_sst_user' 'wsrep_sst')
    SST_PASSWORD=$(bashio::config 'wsrep_sst_password')

    if [ -n "${SST_PASSWORD}" ]; then
        bashio::log.info "Creating Galera SST user: ${SST_USER}"
        mysql -e "CREATE USER '${SST_USER}'@'%' IDENTIFIED BY '${SST_PASSWORD}';" 2> /dev/null || true
        mysql -e "GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO '${SST_USER}'@'%';" 2> /dev/null || true

        # Also create common Galera users that might be needed for cluster communication
        bashio::log.info "Creating additional Galera cluster users for compatibility"

        # Create root user with cluster access (for cluster management)
        mysql -e "CREATE USER 'root'@'192.168.68.2' IDENTIFIED BY 'K3yb0ard!!P';" 2> /dev/null || true
        mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.68.2' WITH GRANT OPTION;" 2> /dev/null || true

        # Create homeassistant user with cluster access (for the application)
        HOMEASSISTANT_PASSWORD=$(bashio::config 'logins[0].password')
        mysql -e "CREATE USER 'homeassistant'@'192.168.68.2' IDENTIFIED BY '${HOMEASSISTANT_PASSWORD}';" 2> /dev/null || true
        mysql -e "GRANT ALL PRIVILEGES ON homeassistant.* TO 'homeassistant'@'192.168.68.2';" 2> /dev/null || true

        bashio::log.info "Galera SST user and cluster users created successfully"

        # Log current users for debugging
        bashio::log.info "Current database users:"
        mysql -e "SELECT user, host FROM mysql.user;" 2>/dev/null | while read line; do
            bashio::log.info "  ${line}"
        done
    else
        bashio::log.warning "Galera is enabled but wsrep_sst_password is not set. SST user will not be created."
    fi

    # Verify Galera ports are properly bound
    bashio::log.info "Verifying Galera port connectivity..."
    sleep 2  # Give MariaDB time to fully initialize Galera

    # Check if Galera ports are listening
    GALERA_PORTS_OK=true
    for port in 4567 4568 4444; do
        if netstat -tuln 2>/dev/null | grep -q ":${port} "; then
            bashio::log.info "‚úÖ Galera port ${port}: Listening"
        else
            bashio::log.error "‚ùå Galera port ${port}: Not listening"
            GALERA_PORTS_OK=false
        fi
    done

    if [ "$GALERA_PORTS_OK" = true ]; then
        bashio::log.info "üéâ All Galera ports are properly bound and listening"
    else
        bashio::log.warning "‚ö†Ô∏è  Some Galera ports are not listening. Cluster communication may fail."
        bashio::log.info "You can run 'galera-debug check' inside the container for detailed diagnostics"

        # Enhanced diagnostics for port issues
        bashio::log.info "=== Enhanced Galera Diagnostics ==="
        bashio::log.info "All listening ports:"
        netstat -tuln 2>/dev/null | grep LISTEN || ss -tuln 2>/dev/null | grep LISTEN || true

        bashio::log.info "Galera provider status:"
        mysql -e "SELECT @@wsrep_on, @@wsrep_provider, @@wsrep_cluster_name, @@wsrep_node_name;" 2>/dev/null || bashio::log.warning "Could not retrieve provider info"

        bashio::log.info "Galera configuration variables:"
        mysql -e "SHOW VARIABLES LIKE 'wsrep_provider_options';" 2>/dev/null || true
        mysql -e "SHOW VARIABLES LIKE 'wsrep_sst_receive_address';" 2>/dev/null || true
        mysql -e "SHOW VARIABLES LIKE 'wsrep_node_incoming_address';" 2>/dev/null || true

        bashio::log.info "MariaDB process command line:"
        ps aux | grep mysqld | grep -v grep || true
    fi

    # Show Galera status
    if mysql -e "SHOW STATUS LIKE 'wsrep_ready';" 2>/dev/null | grep -q "ON"; then
        bashio::log.info "‚úÖ Galera is ready and operational"
        mysql -e "SHOW STATUS LIKE 'wsrep_%';" 2>/dev/null | head -10
    else
        bashio::log.warning "‚ö†Ô∏è  Galera may not be fully initialized yet"
        bashio::log.info "Galera status variables:"
        mysql -e "SHOW STATUS LIKE 'wsrep_local_state_comment';" 2>/dev/null || true
        mysql -e "SHOW STATUS LIKE 'wsrep_cluster_size';" 2>/dev/null || true
        mysql -e "SHOW STATUS LIKE 'wsrep_provider_name';" 2>/dev/null || true

        # Wait for cluster to initialize and check cluster size
        bashio::log.info "‚è≥ Waiting for Galera cluster to initialize..."
        for i in {1..30}; do
            sleep 2
            CLUSTER_SIZE=$(mysql -e "SHOW STATUS LIKE 'wsrep_cluster_size';" --skip-column-names 2>/dev/null | awk '{print $2}' || echo "0")
            LOCAL_STATE=$(mysql -e "SHOW STATUS LIKE 'wsrep_local_state_comment';" --skip-column-names 2>/dev/null | awk '{print $2}' || echo "Unknown")

            bashio::log.info "üîç Check ${i}/30: Cluster size: ${CLUSTER_SIZE}, Local state: ${LOCAL_STATE}"

            if [ "$CLUSTER_SIZE" -gt 0 ] && [ "$LOCAL_STATE" = "Synced" ]; then
                bashio::log.info "üéâ Galera cluster is ready! Cluster size: ${CLUSTER_SIZE}, State: ${LOCAL_STATE}"
                break
            elif [ "$CLUSTER_SIZE" -gt 0 ]; then
                bashio::log.info "‚ö° Cluster detected (size: ${CLUSTER_SIZE}) but not fully synced yet (state: ${LOCAL_STATE})"
            else
                bashio::log.info "‚è≥ Still waiting for cluster connection..."
            fi

            if [ $i -eq 30 ]; then
                bashio::log.warning "‚ö†Ô∏è  Cluster initialization timeout after 60 seconds. Current state: size=${CLUSTER_SIZE}, state=${LOCAL_STATE}"
                bashio::log.info "This is normal for the first node in a new cluster, or if other nodes are not yet available."
            fi
        done
    fi
fi

# Flush privileges
mysql -e "FLUSH PRIVILEGES;" 2> /dev/null || true

# Send service information to the Supervisor
PAYLOAD=$(\
    bashio::var.json \
        host "$(hostname)" \
        port "^3306" \
        username "service" \
        password "${SECRET}"
)
bashio::log.info "Sending service information to Home Assistant"
bashio::services.publish "mysql" "${PAYLOAD}"
